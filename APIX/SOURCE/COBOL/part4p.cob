000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID. PART4P.
000300 AUTHOR.     HINKOKO.
000400*******************************************************
000500*    THIS PROGRAM IS INTENDED TO :                    *
000600*      - CREATE AN XML FILE FOR CONSULTING            *
000700*      COMPANY IN MARKET STUDY                        *
000800*      - SORT PRODUCTS  BY BEST RANKING               *
000900*  Dependencies -> copybook 'stxml' (apixx.cob.cpy)   *
001000*******************************************************
001100
001200 ENVIRONMENT DIVISION.
001300 CONFIGURATION SECTION.
001400 SPECIAL-NAMES.
001500     DECIMAL-POINT IS COMMA.
001600 INPUT-OUTPUT SECTION.
001700 FILE-CONTROL.
001800        SELECT ENRXML ASSIGN TO FXML.
001900******************************************
002000 DATA DIVISION.
002100 FILE SECTION.
002200 FD ENRXML.
002300 01 ENR-XML PIC X(79).
002400
002500 WORKING-STORAGE SECTION.
002600 COPY STXML.
002610
002620 01 XML-PROLOG.
002630    05 FILLER         PIC X(38).
002640 01 PROLOG            PIC X(38)
002650       VALUE '<?XML VERSION="1.0" ENCODING="UTF-8"?>'.
002660
002700 01 DESIG-STRING      PIC X(79).
002800
002900 01 LINE-COUNT        PIC 9(03) VALUE 0.
003000 01 PAGE-LIMIT        PIC 9(02) VALUE 50.
003100 01 PROD-LINE-COUNT   PIC 9(01) VALUE 5.
003200
003300 01 WS-RANK           PIC 9(02) VALUE 1.
003400 01 STRING-RANK       PIC X(80).
003500
003600 77 IT-VOLUME         PIC S9(2)V USAGE COMP-3.
003700 77 SEP               PIC X(70) VALUE ALL SPACES.
003800 77 WS-ANO            PIC 9(01) VALUE 0.
003900
004000** EDITOR MODE ***
004100 01 ED-SQLCODE        PIC +Z(8)9.
004200
004300 01 ED-RANK           PIC ZZ9.
004400 01 ED-VOLUME         PIC ZZ9.
004500 01 ED-DESIG          PIC X(30).
004600****************       DB2      ***************
004700     EXEC SQL INCLUDE SQLCA    END-EXEC
004800     EXEC SQL INCLUDE ITE      END-EXEC
004900     EXEC SQL INCLUDE PRO      END-EXEC
005000
005100     EXEC SQL
005200        DECLARE CITEMS CURSOR
005300        FOR SELECT
005400             I.P_NO,
005500             P.DESCRIPTION,
005600             SUM(I.QUANTITY) AS VOL
005700          FROM api10.ITEMS I
005800          JOIN api10.PRODUCTS P
005900          ON I.P_NO = P.P_NO
006000          GROUP BY I.P_NO, P.DESCRIPTION
006100          ORDER BY VOL DESC
006200     END-EXEC
006300
006400*********************************************
006500 PROCEDURE DIVISION.
006600     OPEN OUTPUT ENRXML
006601****************************************************
006602* WRITING THE XML PROLOGUE TO MEET XML STANDARDS   *
006603****************************************************
006604
006610     MOVE FUNCTION LOWER-CASE(PROLOG) TO XML-PROLOG
006620     WRITE ENR-XML FROM XML-PROLOG
006700     EXEC SQL OPEN CITEMS END-EXEC
006800     PERFORM TEST-SQLCODE
006900
007000     PERFORM RANK-ITEMS
007100
007200     EXEC SQL CLOSE CITEMS END-EXEC
007300     PERFORM TEST-SQLCODE
007400
007500     CLOSE ENRXML
007600
007700     GOBACK.
007800
007900* PARAGRAPHS
008000 RANK-ITEMS.
008100     PERFORM FETCH-ITEMS
008200     MOVE 1 TO WS-RANK
008300     WRITE ENR-XML FROM ST-OPEN-VT
008400
008500     PERFORM UNTIL SQLCODE NOT = 0
008600
008700         PERFORM WRITE-XML
008800         PERFORM FETCH-ITEMS
008900         ADD 1 TO WS-RANK
009000
009100     END-PERFORM
009200     WRITE ENR-XML FROM ST-CLOSE-VT
009300     .
009400
009500 WRITE-XML.
009600     IF WS-RANK < 3 THEN
009700       PERFORM SHOWCASE-SYSOUT
009800       DISPLAY SEP
009900     END-IF
010000
010100     MOVE WS-RANK    TO RANK-NUMBER
010200     MOVE IT-VOLUME  TO VOL-VALUE
010300     MOVE ITE-P-NO    TO PROD-NUMBER
010400
010500** STARTING TO WRITE ***
010600     IF LINE-COUNT + PROD-LINE-COUNT > PAGE-LIMIT
010700        WRITE ENR-XML FROM SEP AFTER ADVANCING PAGE
010800        MOVE 0 TO LINE-COUNT
010900     END-IF
011000
011100     PERFORM STRINGIFY-DESIG-AND-VOLUME
011200
011300     WRITE ENR-XML FROM OPENING-PRODUCT
011400     WRITE ENR-XML FROM ST-RANK
011500     WRITE ENR-XML FROM DESIG-STRING
011600     WRITE ENR-XML FROM ST-VOLUME
011700     WRITE ENR-XML FROM ST-CLOSE-PROD
011800
011900     ADD PROD-LINE-COUNT TO LINE-COUNT
012000     DISPLAY WS-RANK LINE-COUNT
012100     .
012200
012300 STRINGIFY-DESIG-AND-VOLUME.
012400     STRING '          '      DELIMITED BY SIZE
012500            '<DESIGNATION>'
012600            PRO-DESCRIPTION-TEXT(1:PRO-DESCRIPTION-LEN)
012700            '</DESIGNATION>'  DELIMITED BY '  '
012800      INTO DESIG-STRING
012900     END-STRING
013000     .
013100
013200 FETCH-ITEMS.
013300     INITIALIZE VOL-VALUE PROD-NUMBER DESIG-STRING
013400     EXEC SQL
013500       FETCH CITEMS
013600       INTO :ITE-P-NO, :PRO-DESCRIPTION, :IT-VOLUME
013700     END-EXEC
013800     PERFORM TEST-SQLCODE
013900     .
014000
014100 SHOWCASE-SYSOUT.
014200     MOVE
014300        PRO-DESCRIPTION-TEXT(1:PRO-DESCRIPTION-LEN) TO ED-DESIG
014400     MOVE IT-VOLUME TO ED-VOLUME
014500     MOVE WS-RANK TO ED-RANK
014600     DISPLAY 'PRODUCT NUMBER: ' ITE-P-NO ' |'
014700         ' RANKED: ' ED-RANK '| DESIGNATED AS: ' ED-DESIG
014800     DISPLAY 'HAS BEING SOLD: ' ED-VOLUME ' TIMES.'
014900     .
015000
015100 TEST-SQLCODE.
015200     EVALUATE TRUE
015300          WHEN SQLCODE = ZERO
015400             CONTINUE
015500          WHEN SQLCODE > ZERO
015600             IF SQLCODE = +100
015700               DISPLAY  'END OF PRODUCT RANKING '
015800             END-IF
015900             MOVE SQLCODE TO ED-SQLCODE
016000             DISPLAY 'WARNING : ' ED-SQLCODE
016100          WHEN OTHER
016200             MOVE SQLCODE TO ED-SQLCODE
016300             DISPLAY 'ANOMALIE ' ED-SQLCODE
016400             PERFORM ABEND-PROG
016500      END-EVALUATE
016600      .
016700
016800 ABEND-PROG.
016900     EXEC SQL ROLLBACK END-EXEC
017000     DISPLAY 'ROLLING BACK TO PREV TABLE STATE'
017100     COMPUTE WS-ANO = 1 / WS-ANO.
017200
