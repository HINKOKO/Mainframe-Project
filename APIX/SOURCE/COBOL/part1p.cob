000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID. PART1P.
000300 AUTHOR.     HINKOKO.
000400******************************************************************
000500* THIS PROGRAM IS INTENDED TO :                                  *
000600*    - PARSE CSV FILE FOR PREPARING A DB12 INSERT                *
000700*    - CALL A ROUTINE TO CONVERT PRICE IN USD                    *
000800*    - FORMAT DESCRIPTION PRODUCT IN A NICE CAMEL CASE           *
000900*    - PERFORM THE DB2 INSERTION (DEALS WITH DB2 ERRORS AS WELL) *
001000******************************************************************
001100
001200 ENVIRONMENT DIVISION.
001300 INPUT-OUTPUT SECTION.
001400 FILE-CONTROL.
001500        SELECT NEWS ASSIGN TO FICNEWS.
001510        SELECT FLOG ASSIGN TO FICLOG.
001600******************************************
001700 DATA DIVISION.
001800 FILE SECTION.
001900 FD NEWS.
002000 01 ENR-NEWS.
002100    05 ENR-CSV      PIC X(45).
002200
002210 FD FLOG.
002220 01 ENR-LOG         PIC X(80).
002230
002300 WORKING-STORAGE SECTION.
002400*  variables for holding csv parsing *
002500 01 PROD-NO         PIC X(3).
002600 01 PROD-DESC       PIC X(20).
002700 01 PROD-PRICE      PIC 9(3)V99.
002800 01 PROD-PRICE-CSV  PIC X(6).
002900 01 PROD-DEVISE     PIC X(2).
002910
003000** VARS CLASSIQUES
003100 77 NEWS-FLAG     PIC 9  VALUE 0.
003200      88 FF-NEWS         VALUE 1.
003310 77 VALID-DATA    PIC 9.
003320      88 DATA-OK         VALUE 1.
003330      88 DATA-KO         VALUE 0.
003340
003350 77 CSV-LINE      PIC 99 VALUE 0.
003360
003370 77 USD-AMOUNT  PIC 9(3)V99.
003400 77 WS-ANO      PIC 9 VALUE 0.
003410 01 WS-MSG      PIC X(20) VALUE SPACES.
003500 01 ED-SQLCODE  PIC +Z(8)9.
003600
003700*** SOUS PROG ***
003800 77 WS-SSPROG      PIC X(8) VALUE 'CONVERT'.
003900
004000** VARIABLES FOR STRING MANIPULATION **
004100 01 TMP-DESC       PIC X(20).
004200 01 FIRST-CHAR     PIC X(20).
004300 01 WS-I           PIC 9(2).
004310** LOG FILE ***
004311 01 LOG-HEAD        PIC X(27) VALUE "LOG REPORT FOR NEWPRODS.CSV".
004312 01 ST-LOG.
004313    05 FILLER       PIC X(12) VALUE "CSV LINE N. ".
004314    05 LOG-REF-TO   PIC 9(02).
004315    05 FILLER       PIC X(02).
004316    05 LOG-MSG      PIC X(20).
004317    05 FILLER       PIC X(02).
004318    05 LOG-PNO      PIC X(03).
004319    05 LOG-PDESC    PIC X(30).
004320
004400**************** DB2 *******
004500     EXEC SQL INCLUDE SQLCA END-EXEC
004600     EXEC SQL INCLUDE PRO END-EXEC
004700
004800 PROCEDURE DIVISION.
004900     OPEN INPUT NEWS
004910     OPEN OUTPUT FLOG
004920     WRITE ENR-LOG FROM LOG-HEAD
004930
005000     PERFORM LECT-NEWS
005100
005200     PERFORM UNTIL FF-NEWS
005201
005210        SET DATA-OK TO TRUE
005300        PERFORM PARSE-LINE
005400
005500        IF PROD-PRICE  > 0 AND DATA-OK
005600            MOVE PROD-NO             TO PRO-P-NO
005700            MOVE PROD-PRICE          TO PRO-PRICE
005800            PERFORM FORMAT-DESC
005900            PERFORM INSERT-DB
006000        END-IF
006100
006400        PERFORM LECT-NEWS
006410
006500     END-PERFORM
006510
006520     CLOSE NEWS FLOG
006530
006600     GOBACK.
006700
006800* PARAGRAPHS
006900 LECT-NEWS.
006910     ADD 1 TO CSV-LINE
007000     READ NEWS AT END
007100        SET FF-NEWS TO TRUE
007200        DISPLAY 'FIN FICHIER NEWS'
007300     END-READ
007310     .
007320
007400** PARSE-LINE - SPLITS THE CSV ; DEMILITED LINE INTO VARIABLES FOR PREPA
007500 PARSE-LINE.
007600     UNSTRING ENR-CSV DELIMITED BY ';'
007700        INTO PROD-NO
007800             PROD-DESC
007900             PROD-PRICE-CSV
008000             PROD-DEVISE
008100     END-UNSTRING
008101
008110** Sanity check of variables
008200     IF LENGTH  OF PROD-NO IS = 3  AND
008300        LENGTH  OF PROD-DESC > 0   AND
008310        LENGTH  OF PROD-DESC < 31  AND
008320        LENGTH  OF PROD-DEVISE = 2 THEN
008330        DISPLAY 'ALL FIELDS EXCEPT PRICE ARE GOOD SO FAR '
008340        SET DATA-OK TO TRUE
008350        PERFORM CHECK-PRICE
008360     ELSE
008400        SET DATA-KO TO TRUE
008410     END-IF
008420     .
008421
008430** USD-CONVERT - PERFORM THE USD DOLLAR CONVERSION BEFORE DB2 INSERTION
008500 USD-CONVERT.
008600     CALL WS-SSPROG USING
008700              PROD-DEVISE
008710              PROD-PRICE
008800              WS-MSG
008810
008820     IF WS-MSG IS NOT = SPACES THEN
008830          MOVE    WS-MSG    TO   LOG-MSG
008840          PERFORM WRITE-LOG
008850     END-IF
008860     .
008870
008880** CHECK-PRICE - CHECK IF PRICE IS ACTUALLY PRESENT IN CSV FILE AND PROP
008900 CHECK-PRICE.
008910     IF PROD-PRICE-CSV = SPACES THEN
008920         MOVE 'PRICE MISSING'     TO LOG-MSG
008930         PERFORM WRITE-LOG
008940         SET DATA-KO TO TRUE
008950     ELSE
008960         SET DATA-OK TO TRUE
008970         COMPUTE PROD-PRICE = FUNCTION NUMVAL(PROD-PRICE-CSV)
008980         PERFORM USD-CONVERT
008990     END-IF
008991     .
008992
008993** FORMAT-DESC - TRANSFORM THE UPPERCASE DESCRIPTION TO CAMELCASE STYLE
009000 FORMAT-DESC.
009100      MOVE FUNCTION LOWER-CASE(PROD-DESC) TO TMP-DESC
009200
009500      PERFORM VARYING WS-I FROM 1 BY 1 UNTIL
009600             WS-I > FUNCTION LENGTH(TMP-DESC)
009700             IF WS-I = 1 OR TMP-DESC(WS-I - 1:1) = ' '
009800               MOVE FUNCTION UPPER-CASE(TMP-DESC(WS-I:1))
009900                  TO TMP-DESC(WS-I:1)
010000             END-IF
010100      END-PERFORM
010300
010400      INITIALIZE PROD-DESC
010500      MOVE TMP-DESC TO PROD-DESC
010600      MOVE LENGTH OF PROD-DESC TO PRO-DESCRIPTION-LEN
010700      MOVE PROD-DESC           TO PRO-DESCRIPTION-TEXT
010710      .
010720
010800** EVAL-INSERT - EVAL SQLCODE RETURNED BY DB2 AND TRIGGER A REL
010900 INSERT-DB.
011000     EXEC SQL
011100       INSERT INTO API10.PRODUCTS
011200         (P_NO,DESCRIPTION,PRICE)
011300         VALUES (:PRO-P-NO,
011400                 :PRO-DESCRIPTION,
011500                 :PRO-PRICE)
011600     END-EXEC
011700     PERFORM EVAL-INSERT.
011800
011900 EVAL-INSERT.
012000     EVALUATE TRUE
012100         WHEN SQLCODE = ZERO
012200            CONTINUE
012300         WHEN SQLCODE = -803
012400            DISPLAY
012500              'ERREUR INSERT : DOUBLON SUR-> ' PROD-NO
012510              MOVE '  DOUBLON ! -> ' TO LOG-MSG
012520              PERFORM WRITE-LOG
012600         WHEN SQLCODE > ZERO
012700            DISPLAY 'WARNING : ' SQLCODE
012800         WHEN OTHER
012900            DISPLAY 'ANOMALIE ' SQLCODE
013000            PERFORM ABEND-PROG
013100      END-EVALUATE
013110      .
013120
013200** ABEND-PROG - KILL THE PROGRAM EXECUTION WHEN BAD ERROR HAPP
013300 ABEND-PROG.
013400     EXEC SQL ROLLBACK END-EXEC
013500     DISPLAY 'ROLLING BACK TO PREV TABLE STATE'
013600     COMPUTE WS-ANO = 1 / WS-ANO
013601     .
013602
013610** WRITE-LOG - WRITES A LOG REPORT FOR REJECTED PRODUCTS
013700 WRITE-LOG.
013800     COMPUTE LOG-REF-TO = CSV-LINE
013900     MOVE    PROD-NO        TO LOG-PNO
014000     MOVE    PROD-DESC      TO LOG-PDESC
014100     WRITE   ENR-LOG        FROM ST-LOG
014200     INITIALIZE ST-LOG
014300     .
